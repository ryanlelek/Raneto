#!/usr/bin/env node

// ################################
// ########## DEPRECATED ##########
// ################################
// PM2 is not officially recommended for
// production use by Raneto authors.
// Consider alternatives like systemd instead.
// This has been kept for the time being
// for those that use it and others that
// don't want to use systemd

// ###################
// ##### WARNING #####
// ###################
// This can only be used when installing development modules
// Additionally, the logs will only output the first process
// and not multiple process logs. This should be easy to fix
// by looping through the output but is not developed/tested

// Hide Keymetrics banner on first time PM2 is required
// const consoleLog = console.log;
// console.log    = function () {};
import pm2 from 'pm2';
// console.log    = consoleLog;

// Modules
import path from 'node:path';
import { program } from 'commander';
import { Tail } from 'tail';
import pkg from './package.json' assert { type: 'json' };

const __dirname = import.meta.dirname;
process.chdir(path.normalize(path.join(__dirname, '..')));

program.version(pkg.version);

program
  .command('start')
  .description('Start Raneto Service')
  .action(() => {
    pm2.connect(() => {
      pm2.start(
        {
          script: path.normalize(path.join(__dirname, '..', 'server.js')),
          exec_mode: 'fork',
          instances: 1,
          name: 'raneto',
          env: {
            PORT: 8080,
            NODE_ENV: 'development',
            DEBUG: 'raneto*',
          },
        },
        // (error, apps)
        (error) => {
          if (error) {
            console.log(`Raneto Failed to Start: ${error.msg}`);
          } else {
            console.log('Raneto Service Started.');
          }
          pm2.disconnect();
        },
      );
    });
  });

program
  .command('stop')
  .description('Stop Raneto Service')
  .action(() => {
    pm2.connect(() => {
      // (error, proc)
      pm2.stop('raneto', (error) => {
        if (error) {
          console.log(`Raneto could not be stopped: ${error.msg}`);
          process.exit(1);
        }
        // (error, proc)
        pm2.delete('raneto', (error) => {
          if (error) {
            console.log(`Raneto could not be stopped: ${error.msg}`);
            process.exit(1);
          } else {
            console.log('Raneto Stopped');
            process.exit(0);
          }
        });
      });
    });
  });

program
  .command('restart')
  .description('Restart Raneto Service')
  .action(() => {
    pm2.connect(() => {
      // (error, proc)
      pm2.restart('raneto', (error) => {
        if (error) {
          console.log(`Raneto could not be restarted: ${error.msg}`);
          process.exit(1);
        } else {
          console.log('Raneto restarted');
          process.exit(0);
        }
      });
    });
  });

program
  .command('logs')
  .description('Show Raneto Logs')
  .action(() => {
    pm2.connect(() => {
      pm2.describe('raneto', (error, list) => {
        if (error) {
          console.log(`Error getting info: ${error.msg}`);
          process.exit(1);
        } else if (list.length === 0) {
          console.log('Raneto not running');
          process.exit(0);
        } else {
          const log = new Tail(list[0].pm2_env.pm_out_log_path, '\n', {
            interval: 500,
          });
          const error_log = new Tail(list[0].pm2_env.pm_err_log_path, '\n', {
            interval: 500,
          });
          console.log('##### WARNING! THIS FEATURE IS UNTESTED #####');
          console.log('FILEOUT', list[0].pm2_env.pm_out_log_path);
          console.log('FILEERR', list[0].pm2_env.pm_err_log_path);
          log.on('line', function (data) {
            console.log(data);
          });
          error_log.on('line', function (data) {
            console.log(data);
          });
        }
      });
    });
  });

// Show the config file location in the help
function customHelp(text) {
  const textArray = text.split(/\r?\n/);
  textArray[3] = `  Config: ${path.normalize(
    path.join(__dirname, '..', 'example', 'config.default.js'),
  )}\n`;
  return textArray.join('\n');
}

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp(customHelp);
}
